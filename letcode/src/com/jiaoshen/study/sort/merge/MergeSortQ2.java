package com.jiaoshen.study.sort.merge;

/**
 * 给你一个整数数组 nums 以及两个整数 lower 和 upper 。求数组中，值位于范围 [lower, upper] （包含 lower 和 upper）之内的 区间和的个数 。
 * 考虑相加大于int范围
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode.cn/problems/count-of-range-sum
 *
 * @author jiaoshen
 * @date 2022/5/8-13:40
 */
public class MergeSortQ2 {
    public static void main(String[] args) {
        int[] nums = new int[]{-8672, -3438, -9011, 1524, -7805, 4834, -566, -8620, -5035, -8932, -3268, -2940, 9633, -4532, 7843, 8368, 4159, -4802, -41, -1418, -7794, -9391, -4214, -6584, 791, -5969, 7321, -8471, 150, -9464, 6146, -509, 9675, -2551, 9799, 6006, -2166, -9771, -8544, 1377, -6634, -1661, 1171, 4954, -4549, -3608, 3620, -4266, 1908, -815, 9339, -2335, -1353, -3174, 7414, 3010, -3404, 3939, -5477, -1498, -7676, 5562, -7068, 7135, -1014, 2474, -3557, -430, 5422, 2054, -899, -2180, -2302, 3130, -3632, -1390, 1301, 7468, 4543, -7549, 8287, -6114, 2499, -7721, 3977, -6877, -2404, 3447, -1373, 1593, -7205, 5031, -5122, -9469, -729, 1952, 4108, 9195, -1760, 6267, -3701, 7158, 4247, -5696, 9314, -1894, -5434, -1214, 2422, -9416, -8327, -9960, -4499, -3658, -8164, -9033, 1118, -405, -3223, -1933, -514, -4569, 2062, 5846, -1866, 5082, 5980, -3515, -8201, -81, -7154, -5842, 2393, -8364, -450, -3632, 5289, -8272, -831, 93, -5475, 7139, -5233, -9335, 2069, 293, -2821, -2479, -5911, 1097, 8634, 2879, -5877, 2000, -5795, -3265, 3732, 5143, 2856, -9459, -5266, -7803, -775, -6552, 647, -6620, 9887, -323, 3123, -8345, -5885, 1584, -7735, 8817, 921, -5408, -6755, -2837, -478, 3705, -5811, -2970, 6094, 7205, 840, 7125, 9792, 8358, 8642, -9910, -8442, -5541, 7647, 923, 9014, -6800, 2039, 6844, 8820, -4131, 1251, 4293, -2813, -1777, 9499, 1127, 2584, 4725, 6342, 5618, -1677, -8063, 9129, 1504, 9648, 2190, 9920, 4678, -5264, -8132, 5003, -3293, 8760, 2834, 9105, 6474, 9368, -8613, -6821, 1324, 7757, -4478, 7998, 9944, 7800, -1736, 4548, -1759, -8090, -6748, -5302, 3710, -537, 1806, 9918, 4782, -607, -5948, -1450, 2785, 1072, -8579, -3200, -6062, -1885, -2297, -9450, -7187, -6324, -1242, 581, 2612, -2607, -5579, -7410, -8282, -1318, 1203, 8816, -1252, 4955, -7306, 4042, 5311, 2424, -1348, 5430, 918, -7022, -1694, -7808, -5951, -7160, 4665, -9974, -8197, -2530, 72, -8946, -3952, -7900, -5876, -5465, 951, -3614, -3564, -1967, -4195, 3679, -601, 8754, -2771, -4223, 6313, 9800, -6134, 514, -2854, -2594, 9654, 6260, 1961, -2741, -8637, 1864, -1062, 2613, 9649, 9587, 4189, -2356, 1855, 9943, -7796, -2040, -5989, 2109, -5148, -7001, -9047, 7730, 4882, -7540, 9459, -3009, -2858, 5480, 6043, 4983, -1245, -8777, 5335, 7897, 6544, 2097, 2160, -319, 2878, 6392, -9139, 9082, 5612, -3509, 717, -6166, -4696, -2171, 3843, -5596, 893, -2689, 3339, -749, 6734, -7904, -6073, -7036, 2946, -6825, -5649, -1786, -3385, -4444, 6611, 7035, 4662, 6588, -3628, 5644, 5765, 8040, 2899, -3374, 5984, 5551, 7679, -4848, 6046, 2206, -2972, 2237, -6940, 1045, 1141, 4453, -7811, -6224, 9781, 3088, -4258, -9137, 1993, 3114, -4784, 7673, 1125, 3365, -6315, 3474, 7100, 2747, -5475, -7740, 3131, -6574, 5324, 3333, -4431, 5181, -8442, 2152, -2142, 4133, -4867, -4543, -1290, 577, 1957, -6087, 8175, 100, 5548, 9587, -769, 1089, -8921, -1273, 634, -10000, 1715, 3705, -9662, -3411, -155, -4371, -2779, 1138, 6995, -5407, 5591, -2993, 7967, 5492, -9779, -2712, 7133, 7196, -5562, 2376, 6678, 1653, -4755, -2469, -6244, -40, 5686, -4328, 3317, -6317, -8060, -3538, 5490, 7790, -835, 9648, 2101, -6988, 5815, -8818, 8913, 4783, 2314, -8911, 7063, 6983, -331, -1246, -6167, -3237, 6393, -1520, 4951, -7269, 4222, -9468, -2859, 9203, 1058, 8336, -7925, 9169, -6516, -7200, 1164, -5642, -9019, 7963, 3890, -9271, 3165, -2561, -2583, -3626, -9088, 4580, 404, -1859, 694, -6873, -6574, 7727, -877, 1351, -8184, 1878, 901, 9811, -2333, 2514, 1961, -7204, -3445, -3948, -5023, 8525, 2735, 3351, -3829, -3612, 1669, -1699, 4173, 4881, -7907, -2681, 6907, 8094, -6820, 7234, -1069, -1331, -841, 8263, 686, -7123, 8888, 2478, -2095, -8200, 428, 4510, 264, -7937, -9937, -9945, 6393, 9219, -2849, -714, -3835, -7508, 7247, -7052, 2067, 5872, -2245, -366, 8108, 2838, -7635, 3235, -3861, -8040, -1008, -3604, 6859, 7071, 5055, -8630, 900, 4875, 168, -5656, -2540, -7487, -7059, -8458, 3310, 9824, -7435, 3302, 1422, -1634, -6999, 5242, -5247, 8246, -6494, -769, -4145, -9941, -7321, 1580, 441, -4726, -5186, -737, 9562, 2498, -8630, -9681, 8092, 6213, -7332, -7487, 2415, 5176, 4193, 6616, 3645, -6715, 7317, -3676, 3390, -4031, -1643, -9060, 438, 7284, -7107, 7032, 2606, 6097, 8431, 468, -105, -4149, -6525, 2790, 8313, -7067, -4110, 8733, 9500, 3036, -1284, -9554, -3849, -8831, -4581, -3904, 7957, -9166, -6999, -9915, 9851, 8759, 3065, -1753, -8458, -1279, -6691, 8813, 2939, 2068, -255, -3841, -7283, 6314, -7818, -6865, -6304, -6719, 1396, -3223, 6161, -2245, 9792, 5792, 6904, -9722, -7362, -6719, 3884, 1169, -3528, 4629, -4543, 1892, 4563, -8369, 5402, 3343, -7511, 9885, 8190, -6709, 6598, 1172, 968, -2514, -5907, -9633, -2203, 3508, 2216, -6310, 4180, -9977, 6305, 9040, -1726, -8938, 2021, -7099, 3658, 4138, 2511, -7214, -7831, -3465, 7109, -2968, -4244, 9888, -2188, 3298, 4190, 7169, 9017, 7392, -7849, -8422, 3122, -7379, 9891, -6391, 9049, -251, -6787, 8300, -5396, 1879, 3977, -9786, 3759, 878, 2833, 2653, -494, -1420, -5264, -451, -7835, -3537, -8285, -8066, -6394, 8640, 3521, -7177, -7592, 1283, 5491, -6930, -274, -7148, 177, 2972, 9855, -4583, -878, 7480, -755, -5785, 4515, -8650, 1810, -1731, 8292, -4373, 955, 1308, -1196, 632, -6218, -8567, 3660, 9047, 790, -6590, -2477, 120, -2110, 296, -2132, 6382, 7513, 753, -2616, 9954, -1543, -2369, -8043, 1907, -8540, 2176, -3195, 4616, -1887, 391, 8175, 9176, 8118, -9677, -8733, -2230, -3297, -2313, -7663, -3585, 1550, -6450, 1558, 5233, 312, 917, 3305, 6619, -7088, 8456, 4423, 2324, -5133, -904, -8752, 5599, -3379, -8083, 1776, 1202, -6010, 8987, -48, 2565, -5336, 4794, -4829, 9403, 8667, -9612, -2549, -993, 2739, -2041, 7705, -9319, -6592, 9641, 5805, 2331, -7808, 6783, -3184, 5444, -465, 3923, -1271, -8222, -2961, 9954, 2686, 6975, 1891, 1196, 8505, -4964, 5947, -7421, 3049, -7351, -1048, 4538, 7406, -2690, 2505, -6688, -8564, 2119, -6314, -485, -6545, -6470, -2074, -6705, -5993, 2102, 5443, -6835, 3928, -5626, -7060, 9641, -8221, 5677, 7347, 8020, -2916, 9923, 2634, 3527, -2437, -3627, 4269, 1580, 2790, -2258, -4588, -9705, 5117, 2946, 9456, -7500, 5763, 5445, -3343, 1549, -7429, 2069, -6465, -7758, -1395, 7351, 8289, -2806, -3488, 6015, 1314, -5782, -2429, 6621, 8809, -1398, -9973, -6327, 9662, 576, 6093, -3313, -4167, 482, -5734, 7716, 4508, -5586, 3829, -5812, 2018, 4505, 8692, -8414, -3348, -7202, 878, 2447, 1558, -2069, -3969, 5917, 2783, 8783, -9886, 584, -219, -9998, 559, -2633, 7663, 4769, -3302, 1727, 3194, -7214, -2290, -8870, -9703, 8389, -3692, -9463, -1291, 9794, 1758, 1908, 7921, -5274, -9157, -4880, 3812, 7258, 7238, 2373, 2917, -9394, 9495, -7100, 255, 2552, -8058, 8818, 7065, 9071, 1824, 7463, 8983, 7445, -3737, 3226, -5577, -1027, -7551, -1950, 1659, -2692, -3145, -1314, 7370, 3905, -265, 2905, -7558, 3106, 4143, 1616, -4934, 1969, -7975, -7108, 1443, -2156, -550, -4175, -1805, 6021, 4391, -1525, 8897, 3658, 6561, -9637, -2479, -4630, -2613, -2168, 8031, -9820, 1715, 4877, 8179, -4326, 5528, 8936, -5429, -9908, -4238, -3474, 4228, -2980, -1078, -3338, -5237, -5242, -2893, -9104, 494, -8236, 4934, 1793, 6009, -3350, -8641, 8031, -6401, -9961, 6986, 1953, 3148, 4958, 2088, -704, 7198, 2245, -7155, 9487, 6391, 4340, -852, -728, 62, 5623, 419, -7453, -9745, -2013, -3513, -3442, 1954, -2065, -8031, -8868, 2636, 8657, 913, -1743, -391, -7860, 5026, };


        int lower=-7599;
        int upper =  66298;
        long before = System.currentTimeMillis();
        int result = countRangeSum(nums,lower,upper);
        long after = System.currentTimeMillis();
        System.out.println("result:"+result);
        System.out.println("cost:"+(after-before));




    }

    public static int countRangeSum(int[] nums, int lower, int upper) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        long [] preSum = new long[nums.length];
        //求前缀和
        long sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            preSum[i] = sum;
        }
        return process(preSum, 0, nums.length - 1, lower, upper);
    }


    private static int process(long sum[], int left, int right,int lower,int upper) {
         if(left == right){
            if(sum[left] >= lower && sum[left] <= upper){
                return 1;
            }else{
                return 0;
            }
        }
        int mid = (right + left) >> 1;
        return process(sum, left, mid,lower,upper) + process(sum, mid + 1, right,lower,upper) + merge(sum, left, right, mid,lower,upper);
    }

    /**
     * 左小值累加之和
     *
     * @param sum
     * @param left
     * @param right
     * @param mid
     * @return
     */
    private static int merge(long[] sum, int left, int right, int mid,int lower,int upper) {
        long[] temp = new long[right - left + 1];
        //临时数组下标
        int indexLeft = left;
        int indexRight = mid + 1;
        int result = 0;
        int windowL = left;
        int windowR = left;
        for(int i=mid+1;i<=right;i++){
            long min =sum[i]-upper;
            long max =sum[i]-lower;
            while (windowR <= mid && sum[windowR] <= max) {
                windowR++;
            }
            while (windowL <= mid && sum[windowL] < min) {
                windowL++;
            }
            result += windowR - windowL;
        }
        int i =0;
        while (indexLeft <= mid || indexRight <= right) {
            if (indexLeft > mid) {
                temp[i++] = sum[indexRight++];
            } else if (indexRight > right) {
                temp[i++] = sum[indexLeft++];
            } else {
                if (sum[indexLeft] < sum[indexRight]) {
                    temp[i++] = sum[indexLeft++];
                } else {
                    temp[i++] = sum[indexRight++];
                }
            }
        }
        for (int j = 0; j <= right - left; j++) {
            sum[j + left] = temp[j];
        }
        return result;
    }
}
